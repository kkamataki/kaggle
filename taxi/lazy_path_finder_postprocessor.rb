#!/usr/local/bin/ruby

require './calc_grid.rb'

def calc_long_lat_mean(end_locs)

  long_sum = 0.0
  lat_sum = 0.0

  end_locs.each do |geo_idx|
    longlat = from_grid_to_longlat(geo_idx.to_i)
    long_sum += longlat[:long]
    lat_sum += longlat[:lat]
  end

  return {:long => long_sum/end_locs.size, :lat => lat_sum/end_locs.size}

end

tid_set = []
open("sampleSubmission.csv").each do |x|
  tid = x.split(",")[0]
  tid_set.push(tid) if tid =~ /T\d/
end


f = open(ARGV[1],'w')

f.puts %Q{"TRIP_ID","LATITUDE","LONGITUDE"}

open(ARGV[0]) do |l|

  #skip header
  l.gets

  tid_idx = 0
  #get result for each test item
  l.read.split("\n").each do |x|
    average_long_lat = calc_long_lat_mean(x.split(","))

    f.print tid_set[tid_idx] + ","

    unless average_long_lat[:long].to_s == "NaN"
      f.puts average_long_lat[:lat].to_s + "," + average_long_lat[:long].to_s
    else
      ### When no end matching point was found in the training set, just print out the center of the city geo location
      ### in the sampleSubmission.csv at this moment  (Note: this is a rare case)
      f.puts "41.146504,-8.611317"
    end
    tid_idx += 1

  end

end

#Intersting outlier example (starting from the grid "2474354")
split(",").each do |x|
#  result = from_grid_to_longlat(x.to_i)
#  puts result[:lat].to_s + "," + result[:long].to_s
#end

f.close
